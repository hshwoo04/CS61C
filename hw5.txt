======= Problem 1 =======
(a.1)
tag = 4
set index = log(2^10) = 10
block offset = log(4) = 2

(a.2)
Address | Cache Hit / Miss | Miss Type (Compulsory, Capacity, or Conflict)
0x0000  |       miss       |	compulsory
0x0004  |       miss       |	compulsory
0x0008  |       miss       |	compulsory
0x000c  |       miss       |	compulsory
0x1000  |       miss       |	compulsory
0x1004  |       miss       |	compulsory
0x1008  |       miss       |	compulsory
0x100c  |       miss       |	compulsory
0x0000  |       miss       |	conflict		
0x0004  |       miss       |	conflict		
0x0008  |       miss       |	conflict		
0x000c  |       miss       |	conflict		

(a.3)
Miss rate = 100%
AMAT = 51ns
(no cache time) - AMAT = -1 ns

(b.1)
tag = 4
set index = log(2^9)= 9
block offset = log(2^3) = 3

(b.2)
Address | Cache Hit / Miss | Miss Type (Compulsory, Capacity, or Conflict)
0x0000  |       miss       |	compulsory
0x0004  |       hit        |
0x0008  |       miss       |	compulsory
0x000c  |       hit        |
0x1000  |       miss       |	compulsory
0x1004  |       hit        |
0x1008  |       miss       |	compulsory
0x100c  |       hit        |
0x0000  |       miss       |	conflict
0x0004  |       hit        |	
0x0008  |       miss       |	conflict
0x000c  |       hit        |	

(b.3)
miss rate = 0.5
hit time = 2 cycles
miss time = 110 cycles
AMAT = 28.5ns
(no cache time) - AMAT = 100*.5 - 28.5 =  21.5 ns

(c.1)
tag = 5
set index = log(2^8) = 8
block offset = log(2^3) = 3

(c.2)
Address | Cache Hit / Miss | Miss Type (Compulsory, Capacity, or Conflict)
0x0000  |      miss        |	compulsory
0x0004  |      hit         |
0x0008  |      miss        |	compulsory
0x000c  |      hit         |
0x1000  |      miss        |	compulsory
0x1004  |      hit         |
0x1008  |      miss        |	compulsory
0x100c  |      hit         |
0x0000  |      hit         |
0x0004  |      hit         |
0x0008  |      hit         |
0x000c  |      hit         |

(c.3)
miss rate = 1/3
hit time = 3 cycles
miss time = 110 cycles
AMAT = 19.8ns
(no cache time) - AMAT = 100*0.5 - 19.8 = 30.2ns

======= Problem 2 =======
a. 0.443
b.
for (j = 0 ; j < 256 ; j++) {
    for (i = 0 ; i < 255 ; i++) {
        array[256*j] += array[256*j + i + 1];
    }
}

The performance can be improved if the two loops were to be switched (outer loop
as the j loop and inner loop as the i loop). The miss rate in this case would be 0.110

c. write back cache would definitely be helpful since there are repeated accesses/modifications to array[256*j]. Write back would allow all the modifications (due to the i value) to happen before the value is written in memory which will be done at the next j value, saving a lot of memory write time.

======= Problem 3 =======
a.0xC8A60000
b. -1698.0
c.  2^26 + 1 = 67108864 + 1 = 67108865
d. 2^-30
e. 2^-55

